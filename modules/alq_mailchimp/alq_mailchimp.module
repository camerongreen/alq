<?php
/**
 * @file
 * Provides the ability to store emails in a mailchimp list
 *
 * Configuration looks like this, basically you provide an array
 * for each list you want to write to in settings.php.  This has an array
 * of tables to pull the data from, and you can customise the fields it
 * pulls the data from/updates and primary key for the table.
 *
 * $conf['alq_mailchimp_api_key'] = 'secret-squirrel';
 * $conf['alq_mailchimp_lists'] = [
 *   [
 *     'id' => 'get-from-mailchimp', // mailchimp list
 *     'tables' => [
 *       [
 *         'name' => 'alq_emails',
 *         'fields' => [
 *           'id' => 'id',
 *           'spam' => 'spam',
 *           'name' => 'from_name',
 *           'email' => 'from_email',
 *         ]
 *       ]
 *     ]
 *   ]
 * ];
 *
 * $conf['alq_mailchimp_webforms'] = [
 *   [
 *     'id' => 'get-from-mailchimp', // mailchimp list
 *     'nid' => '254',
 *     'cid' => '17', // field to put response from email list subscribe
 *     'fields' => [
 *       'first_name' => '[4]["value"][0]',
 *       'last_name' => '[5]["value"][0]',
 *       'email' => '[6]["value"][0]',
 *       'spam' => '[17]["value"][0]',
 *     ]
 *   ]
 * ];
 */

// values for the spam column
define('ALQ_MAILCHIMP_SUBSCRIBE', 1);
define('ALQ_MAILCHIMP_SUCCESS', 2);
define('ALQ_MAILCHIMP_ERROR', 3);
define('ALQ_MAILCHIMP_WEBFORM_SUBSCRIBE', 'on');
define('ALQ_MAILCHIMP_WEBFORM_SUCCESS', 'subscribed');
define('ALQ_MAILCHIMP_WEBFORM_ERROR', 'error');

/**
 * Implements hook_cron
 */
function alq_mailchimp_cron() {
  $mailChimpConfig = alq_mailchimp_get_config();
  if ($mailChimpConfig) {
    $tables = alq_mailchimp_get_tables();
    alq_mailchimp_update_lists('tables', $mailChimpConfig, $tables);
    $webforms = alq_mailchimp_get_webforms();
    alq_mailchimp_update_lists('webform', $mailChimpConfig, $webforms);
  }
}

/**
 * Get auth creds for mailchimp
 *
 * @return array
 */
function alq_mailchimp_get_config() {
  global $conf;

  $apiKey = array_key_exists('alq_mailchimp_api_key', $conf) ? $conf['alq_mailchimp_api_key'] : FALSE;

  if ($apiKey) {
    $subdomain = substr($apiKey, -3, 3);

    return [
      'api_key' => $apiKey,
      'server' => 'https://' . $subdomain . '.api.mailchimp.com/3.0'
    ];
  }

  return FALSE;
}

/**
 * Pull the config which lists the tables to work with
 *
 * @return mixed
 */
function alq_mailchimp_get_tables() {
  global $conf;
  return $conf['alq_mailchimp_lists'];
}

/**
 * Pull the config which lists the webforms to work with
 *
 * @return mixed
 */
function alq_mailchimp_get_webforms() {
  global $conf;
  return $conf['alq_mailchimp_webforms'];
}

/**
 * Update the passed in mail chimp lists
 *
 * @param $type webform or table
 * @param $config
 * @param $lists
 */
function alq_mailchimp_update_lists($type, $config, $lists) {
  if (is_array($lists)) {
    foreach ($lists as $list) {
      if ($type === 'webform') {
        $subscribers = alq_mailchimp_get_webform_subscribers($list);
      }
      else {
        $subscribers = alq_mailchimp_get_subscribers($list['tables']);
      }
      watchdog('info', 'Found ' . count($subscribers) . ' for $type ' . $list['id']);
      if (count($subscribers) > 0) {
        alq_mailchimp_add_members($type, $list, $config, $subscribers);
      }
    }
  }
}

/**
 * Add list of subscribers to the mailchimp list
 *
 * @param $type webform or table
 * @param $list
 * @param $config
 * @param $subscribers
 */
function alq_mailchimp_add_members($type, $list, $config, $subscribers) {
  foreach ($subscribers as $subscriber) {
    $result = alq_mailchimp_add_member($list['id'], $config, $subscriber);
    // more efficient ways to do this but spreads out the requests a little
    if ($type == 'webform') {
      alq_mailchimp_update_webform_status($list, $subscriber, $result ? ALQ_MAILCHIMP_WEBFORM_SUCCESS : ALQ_MAILCHIMP_WEBFORM_ERROR);
    }
    else {
      alq_mailchimp_update_status($list, $subscriber, $result ? ALQ_MAILCHIMP_SUCCESS : ALQ_MAILCHIMP_ERROR);
    }
  }
}


/**
 * Update the list table with the status of the subscribe attempt
 *
 * @param Array $list
 * @param Object $subscriber
 * @param int $status
 * @return bool $success
 */
function alq_mailchimp_update_status($list, $subscriber, $status) {
  $fields = [
    $list['fields']['id'] => $subscriber->id,
    $list['fields']['spam'] => $status
  ];

  if (drupal_write_record($subscriber->origin_table, $fields, $list['fields']['id'])) {
    return TRUE;
  }
  else {
    watchdog('alq_mps', t('Error saving email sending status to ' . $subscriber->origin_table));
    return FALSE;
  }
}


/**
 * Update the list webform with the status of the subscribe attempt
 *
 * @param Array $list
 * @param Object $subscriber
 * @param int $status
 * @return boolean
 */
function alq_mailchimp_update_webform_status($list, $subscriber, $status) {
  $numUpdated = db_update('webform_submitted_data')
    ->fields([
      'data' => $status
    ])
    ->condition('nid', $list['nid'])
    ->condition('cid', $list['cid'])
    ->condition('sid', $subscriber->sid)
    ->execute();

  if ($numUpdated !== 1) {
    watchdog('alq_mps', t('Error saving email sending status to webform #' . $list->nid));
    return FALSE;
  }
  return TRUE;
}

/**
 * Puts a member to the passed in mailchimp list, if they don't exist it
 * creates them, if they do (as defined by email address) it updates them
 *
 * @param $listId
 * @param $config
 * @param $subscriber
 * @return bool
 */
function alq_mailchimp_add_member($listId, $config, $subscriber) {
  $member = [
    'email_address' => $subscriber->email,
    'status' => 'subscribed',
    'merge_fields' => [
      'FNAME' => $subscriber->first_name,
      'LNAME' => $subscriber->last_name
    ]
  ];

  $userHash = md5($subscriber->email);

  $url = $config['server'] . '/lists/' . urlencode($listId) . '/members/' . urlencode($userHash);

  $headers = [
    'Authorization' => 'apikey ' . $config['api_key'],
    'Content-type' => 'application/json'
  ];

  if (FALSE && module_exists('devel')) {
    drush_print(drupal_json_encode($member));
  }
  else {
    $request = drupal_http_request($url, [
      'method' => 'PUT',
      'headers' => $headers,
      'data' => drupal_json_encode($member)
    ]);
    if ($request->code === '200') {
      return TRUE;
    }
    else {
      watchdog('error', __FUNCTION__ . ';code=' . $request->code . ';error=' . $request->error);
      watchdog('error', drupal_json_encode($member));
      return FALSE;
    }
  }
}


/**
 * Check the listed tables for email subscribers
 *
 * @param Array $tables
 * @return Array
 */
function alq_mailchimp_get_subscribers($tables) {
  $memberList = [];

  foreach ($tables as $table) {
    $memberList = array_merge($memberList, alq_mailchimp_get_subscribers_from_table($table));
  }

  return $memberList;
}


/**
 * Check the listed tables for email subscribers
 *
 * @param Array $webform
 * @return Array
 */
function alq_mailchimp_get_webform_subscribers($webform) {
  include_once(drupal_get_path('module', 'webform') . '/includes/webform.submissions.inc');
  return alq_mailchimp_get_subscribers_from_webform($webform);
}

/**
 * Check the listed table for email subscribers
 *
 * @param string $table
 * @return Array
 * @throws \Exception
 */
function alq_mailchimp_get_subscribers_from_table($table) {
  $query = db_select($table['name'], 'tbl');
  $query->condition('tbl.' . $table['fields']['spam'], ALQ_MAILCHIMP_SUBSCRIBE);
  $query->addField('tbl', 'id');
  if (array_key_exists('name', $table['fields'])) {
    $query->addField('tbl', $table['fields']['name'], 'name');
  }
  elseif (array_key_exists('first_name', $table['fields'])
    && array_key_exists('last_name', $table['fields'])
  ) {
    $query->addField('tbl', $table['fields']['first_name'], 'first_name');
    $query->addField('tbl', $table['fields']['last_name'], 'last_name');
  }
  else {
    throw new Exception('Table must have either a name column, or both first_name and last_name columns');
  }

  $query->addExpression('LOWER(tbl.' . db_escape_field($table['fields']['email']) . ')', 'email');
  $query->addExpression(':table', 'origin_table', [':table' => $table['name']]);
  $query->orderBy('tbl.created');

  $results = $query->execute();

  $returnVal = [];

  foreach ($results as $result) {
    if (array_key_exists('name', $table['fields'])) {
      $names = alq_mailchimp_parse_names($result->name);
      $result->first_name = $names['first_name'];
      $result->last_name = $names['last_name'];
    }

    $returnVal[$result->email] = $result;
  }

  return $returnVal;
}

/**
 * Check the listed webform for email subscribers
 *
 * @param string $webform
 * @return Array
 * @throws \Exception
 */
function alq_mailchimp_get_subscribers_from_webform($webform) {
  $results = webform_get_submissions($webform['nid']);

  $returnVal = [];

  foreach ($results as $result) {
    $spam = NULL;
    // yeh I'm using eval, what of it?
    eval('$spam = $result->data' . $webform['fields']['spam'] . ';');
    if ($spam === ALQ_MAILCHIMP_WEBFORM_SUBSCRIBE) {
      $obj = new stdClass();
      eval('$obj->email = $result->data' . $webform['fields']['email'] . ';');
      eval('$obj->first_name = $result->data' . $webform['fields']['first_name'] . ';');
      eval('$obj->last_name = $result->data' . $webform['fields']['last_name'] . ';');
      $obj->sid = $result->sid;
      $returnVal[$obj->email] = $obj;
    }
  }

  return $returnVal;
}

function alq_mailchimp_parse_names($name) {
  $name = preg_replace('/\s+/', ' ', trim($name));
  $parts = explode(' ', $name);
  $salutations = [
    'Mr',
    'Mrs',
    'Miss',
    'Dr',
    'Ms',
    'Prof',
    'Rev'
  ];

  // add .
  $tmpNum = count($salutations);

  for ($i = 0; $i < $tmpNum; $i++) {
    $salutations[] = $salutations[$i] . '.';
  }

  // remove salutations
  if ((count($parts) > 1) && in_array($parts[0], $salutations)) {
    array_shift($parts);
  }

  return [
    'first_name' => $parts[0],
    'last_name' => count($parts) === 1 ? '' : implode(' ', array_slice($parts, 1))
  ];
}

/**
 * Just a test function whilst getting the API working
 *
 * @param $listId
 * @return bool
 */
function alq_mailchimp_get_members($listId) {
  $config = alq_mailchimp_get_config();

  $url = $config['server'] . '/lists/' . urlencode($listId) . '/members';

  $headers = [
    'Authorization' => 'apikey ' . $config['api_key']
  ];

  $request = drupal_http_request($url, [
    'method' => 'GET',
    'headers' => $headers,
  ]);

  if ($request->code === '200') {
    return $request->data;
  }
  else {
    watchdog('error', __FUNCTION__ . ';code=' . $request->code . ';error=' . $request->error);
    return FALSE;
  }
}