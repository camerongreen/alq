<?php

/**
 * @file
 * Provides functions for the animal liberation donate form.
 *
 * This is deprecated.
 */

/**
 * Implements hook_menu().
 */
function alq_forms_menu() {
  $items['donate/submission'] = [
    'page callback' => 'alq_forms_submission',
    // This is a form for everyone.
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
  ];

  $items['membership/submission'] = [
    'page callback' => 'alq_forms_submission',
    // This is a form for everyone.
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
  ];

  return $items;
}

/**
 * Callback handler for form submission.
 */
function alq_forms_submission() {
  global $user;

  $node = alq_forms_webform_loader('Donations form', 'webform');

  try {
    $data = alq_forms_parse_post_fields();

    $serial = _webform_submission_serial_next_value($node->nid);

    $submission = (object) [
      'sid' => NULL,
      'nid' => $node->nid,
      'uid' => $user->uid,
      'serial' => $serial,
      'submitted' => REQUEST_TIME,
      'completed' => REQUEST_TIME,
      'remote_addr' => ip_address(),
      'is_draft' => FALSE,
      'data' => $data,
    ];

    module_load_include('inc', 'webform', 'includes/webform.submissions');
    $sid = webform_submission_insert($node, $submission);
    webform_submission_send_mail($node, $submission);
    $returnVal['type'] = 'success';
    $returnVal['message'] = 'sid:' . $sid;
  }
  catch (Exception $e) {
    $returnVal['type'] = 'error';
    $returnVal['message'] = $e->getMessage();
  }

  drupal_json_output($returnVal);
}

/**
 * Get the webform.
 *
 * @return mixed
 *   Webform or false if not found.
 */
function alq_forms_webform_loader($title, $type) {
  $query = new EntityFieldQuery();
  $entities = $query->entityCondition('entity_type', 'node')
    ->propertyCondition('type', $type)
    ->propertyCondition('title', $title)
    ->range(0, 1)
    ->execute();

  if (!empty($entities['node'])) {
    return node_load(array_shift(array_keys($entities['node'])));
  }

  return FALSE;
}

/**
 * Check on the posted fields.
 *
 * @return array
 *   Posted fields.
 */
function alq_forms_parse_post_fields() {
  $data = [];

  // These need to be in the same order as the database table
  // 'SELECT cid, form_key, name FROM webform_component WHERE nid = :wf_nid;'.
  $fields = [
    'donationType',
    'amount',
    'givenName',
    'familyName',
    'email',
    'phone',
    'address1',
    'address2',
    'suburb',
    'postcode',
    'membershipType',
    'title',
    'newsletter',
    'volunteering',
    'spam',
    'subject',
    'welcome-pack',
  ];

  $required = [
    'donationType',
    'amount',
    'subject',
  ];

  for ($i = 0, $l = count($fields); $i < $l; $i++) {
    $value = array_key_exists($fields[$i], $_POST) ? $_POST[$fields[$i]] : NULL;

    if (in_array($fields[$i], $required) && ($value === NULL)) {
      throw new Exception('Missing required field - ' . $fields[$i]);
    }

    $data[$i + 1] = [
      $value,
    ];
  }

  return $data;
}

/**
 * Implements hook_block_info().
 */
function alq_forms_block_info() {
  return [
    "alq_donation_form" => [
      "info" => t("ALQ Donation Form"),
    ],
    "alq_membership_form" => [
      "info" => t("ALQ Membership Form"),
    ],
  ];
}

/**
 * Implements hook_block_view().
 */
function alq_forms_block_view($delta = "") {
  global $base_url, $conf;
  $block = NULL;

  drupal_add_css(drupal_get_path('module', 'alq_forms') . '/bower_components/form.validation/dist/css/formValidation.css');
  drupal_add_css(drupal_get_path('module', 'alq_forms') . '/theme/styles.css');

  drupal_add_js(drupal_get_path('module', 'alq_forms') . '/bower_components/form.validation/dist/js/formValidation.min.js', ['scope' => 'footer']);
  drupal_add_js(drupal_get_path('module', 'alq_forms') . '/bower_components/form.validation/dist/js/framework/bootstrap.min.js', ['scope' => 'footer']);

  $paypalUrl = variable_get("uc_paypal_wpp_server", "https://api-3t.sandbox.paypal.com/nvp");
  if (stripos($paypalUrl, 'sandbox') === FALSE) {
    $url = 'https://www.paypal.com/cgi-bin/webscr';
    $business = $conf['paypal_id'];
  }
  else {
    $url = 'https://www.sandbox.paypal.com/cgi-bin/webscr';
    $business = $conf['paypal_email'];
  }

  switch ($delta) {
    case "alq_donation_form":
      drupal_add_js(drupal_get_path('module', 'alq_forms') . '/theme/donation-form.js');
      $block["subject"] = t("Donations");

      $redirect_url_cancel = $base_url . '/donate';
      $redirect_url = $base_url . '/thanks';

      $block["content"] = theme("alq_donation_form", [
        'action' => $url,
        'business' => $business,
        'redirect_url' => $redirect_url,
        'redirect_url_cancel' => $redirect_url_cancel,
      ]);
      break;

    case "alq_membership_form":
      drupal_add_library('system', 'ui.slider');

      drupal_add_js(drupal_get_path('module', 'alq_forms') . '/theme/membership-form.js');
      $block["subject"] = t("Membership");

      $redirect_url_cancel = $base_url . '/membership';
      $redirect_url = $base_url . '/thanks';

      $block["content"] = theme("alq_membership_form", [
        'action' => $url,
        'business' => $business,
        'redirect_url' => $redirect_url,
        'redirect_url_cancel' => $redirect_url_cancel,
      ]);
      break;
  }

  return $block;
}

/**
 * Implements hook_theme().
 */
function alq_forms_theme() {
  return [
    "alq_donation_form" => [
      "template" => "theme/donation-form",
      "variables" => [
        'action' => NULL,
        'business' => NULL,
        'redirect_url' => NULL,
        'redirect_url_cancel' => NULL,
      ],
    ],
    "alq_membership_form" => [
      "template" => "theme/membership-form",
      "variables" => [
        'action' => NULL,
        'business' => NULL,
        'redirect_url' => NULL,
        'redirect_url_cancel' => NULL,
      ],
    ],
  ];
}

/**
 * Implements hook_cron().
 */
function alq_forms_cron() {
  $my_module = 'alq_forms';
  $seconds_in_day = 24 * 60 * 60;
  // If no submissions since this time email.
  $days_to_email = 7;

  // Only run once a day.
  if ((time() - $seconds_in_day) >= variable_get('cron_last', 0)) {
    // Donations form.
    $nid = 254;

    $donation_types = [
      'Monthly',
      'One off',
    ];

    foreach ($donation_types as $donation_type) {
      $last_updated = alq_forms_webform_last_submission($nid, $donation_type);

      // If the last submission was more than a week ago, email admin and log
      // in watchdog.
      $time_before = time() - ($days_to_email * $seconds_in_day);
      if ($last_updated < $time_before) {
        watchdog(WATCHDOG_ERROR, "No submissions in last $days_to_email for form $nid type $donation_type");

        $node_url = "http://alq.org.au/node/${nid}";

        $from = variable_get('system_mail', 'info@alq.org.au');
        $message = [
          'id' => $my_module,
          'from' => $from,
          'to' => 'i@camerongreen.org',
          'subject' => 'alq.org.au: No ' . $donation_type . ' donations in last week',
          'body' => ["Form to check: <a href=\"${node_url}\">${node_url}</a>"],
          'headers' => [
            'From' => $from,
            'Sender' => $from,
            'Return-Path' => $from,
          ],
        ];

        $system = drupal_mail_system($my_module, 'webform_submissions_check');
        $message = $system->format($message);
        if (!$system->mail($message)) {
          watchdog(WATCHDOG_ERROR, 'Unable to send submissions email');
        }
      }
    }
  }
}

/**
 * Last date webform had submission.
 *
 * @param int $nid
 *   Nid of webform to check.
 * @param string $donation_type
 *   Data value to check, Monthly or One Off.
 *
 * @return array
 *   Details.
 */
function alq_forms_webform_last_submission($nid, $donation_type) {
  $donation_type_cid = 1;
  $query = db_select('webform_submissions', 'ws');
  $query->join('webform_submitted_data', 'wsd', 'wsd.nid = ws.nid AND wsd.sid = ws.sid');
  $query->addExpression('MAX(ws.completed)', 'max_completed');
  $query->groupBy('ws.nid');
  $query->condition('ws.nid', $nid);
  $query->condition('wsd.cid', $donation_type_cid);
  $query->condition('wsd.data', $donation_type);
  $result = $query->execute();
  return $result->fetchField();
}
