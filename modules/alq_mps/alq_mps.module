<?php
/**
 * @file
 * Provides the ability to store, administer and email members of parliament
 */

include_once(drupal_get_path('module', 'alq_mps') . '/alq_mps_install.inc');

define('ALQ_ELECTORATES_TABLE', 'alq_electorates');
define('ALQ_EMAILS_TABLE', 'alq_emails');
define('ALQ_NODE_REF_TABLE', 'field_data_field_parent_article');

/**
 * Implements hook menu
 */
function alq_mps_menu() {
  $items['alq-mps'] = [
    'page callback' => 'alq_mps_search',
    'access callback' => 'user_access',
    'access arguments' => ['access email campaigns'],
  ];
  $items['alq-mps/details'] = [
    'page callback' => 'alq_mps_details',
    'access callback' => 'user_access',
    'access arguments' => ['access email campaigns'],
  ];
  return $items;
}

/**
 * Menu callback for mps search
 */
function alq_mps_search($search) {
  $result = [];
  if (strlen($search) > 2) {
    // first we get a listing of electorates which map
    // to the postcode or suburb
    $query = db_select(ALQ_ELECTORATES_TABLE, 'ele');
    $query->join('field_data_field_electorate', 'fel', 'ele.state_district = fel.field_electorate_value');
    $query->join('node', 'n', 'n.nid = fel.entity_id');
    $query->condition(
      db_or()
        ->condition('ele.locality', '%' . db_like($search) . '%', 'LIKE')
        ->condition('ele.postcode', db_like($search) . '%', 'LIKE')
    );
    $query->condition('fel.entity_type', 'node', '=')
      ->fields('n', [
        'title',
        'nid'
      ])
      ->fields('ele', [
        'locality',
        'state_district',
        'postcode'
      ]);

    $query->orderBy('ele.locality', 'ASC');
    $query->groupBy('ele.locality');
    $query->groupBy('ele.postcode');
    $query->groupBy('n.nid');

    $results = $query->execute()->fetchAll();
  }

  drupal_json_output($results);
}

/**
 * Menu callback for mps details
 *
 * @param array $nids
 */
function alq_mps_details($nids) {
  $nodes = node_load_multiple($nids);
  drupal_json_output($nodes);
}

/**
 * Menu callback for editing an individual mp
 */
function alq_mps_get($id) {
  $mp = node_load($id);
  return $mp;
}

/**
 * Function to be called which shows the form, loads up the JS etc libraries
 *
 * @param $node
 * @return string
 */
function alq_mps_show_email_campaign($node) {
  if ($cid = alq_mps_has_email_campaign($node->nid)) {

    if (array_key_exists('alq_mps_email_form_submitted', $_SESSION)) {
      unset($_SESSION['alq_mps_email_form_submitted']);
      return '<h2>Thanks for your submission</h2>';
    }
    else {
      drupal_add_css('//maxcdn.bootstrapcdn.com/bootstrap/3.3.5/css/bootstrap.css', array('type' => 'external'));
      drupal_add_js('//maxcdn.bootstrapcdn.com/bootstrap/3.3.5/js/bootstrap.js', array('type' => 'external'));
      drupal_add_js(drupal_get_path('module', 'alq_mps') . '/theme/alq-mps.js');
      $cnode = node_load($cid);
      $form = drupal_get_form('alq_mps_email_form', $cnode);
      return drupal_render($form);
    }
  }
  return '';
}

/**
 * Email campaigns each have a node reference in them
 * If this node has an email campaign, return its id, otherwise false
 *
 * @param $nid
 * @return mixed  false or campaign id
 */
function alq_mps_has_email_campaign($nid) {
  $query = db_select(ALQ_NODE_REF_TABLE, 'nrf');
  $query->condition(
    db_or()
      ->condition('nrf.entity_type', 'node', '=')
      ->condition('nrf.field_parent_article_nid', $nid, '=')
  )->fields('nrf', [
    'entity_id'
  ]);

  $result = $query->execute();

  if (!$result) {
    return FALSE;
  }
  else {
    return $result->fetchField(0);
  }
}

/**
 * Implementation of hook form, with loaded campaign node to
 * prefill fields
 *
 * @param $form
 * @param $form_state
 * @param $cnode
 * @return mixed
 */
function alq_mps_email_form($form, &$form_state, $cnode) {
  $form['campaign_id'] = [
    '#type' => 'hidden',
    '#required' => TRUE,
    '#default_value' => $cnode->nid,
  ];

  $form['search'] = [
    '#title' => 'Find your MP',
    '#type' => 'fieldset',
    '#collapsible' => FALSE
  ];
  $form['search']['suburb'] = [
    '#type' => 'textfield',
    '#title' => t('Suburb or Post Code'),
    '#required' => TRUE,
    '#attributes' => [
      'autocomplete' => 'off'
    ]
  ];

  $form['search']['helper'] = [
    '#type' => 'markup',
    '#markup' => 'If more than one electorate is listed for your suburb, click here to <a href="https://www.ecq.qld.gov.au/electoral-boundaries/find-my-electorate/state-district-maps-new" target="_blank"> find you electorate</a>.'
  ];

  $form['search']['emailee_name'] = array(
    '#title' => 'Member',
    '#type' => 'textfield',
    '#attributes' => array('readonly' => 'readonly'),
    '#required' => TRUE
  );

  $form['search']['emailee_electorate'] = array(
    '#title' => 'Electorate',
    '#type' => 'textfield',
    '#attributes' => array('readonly' => 'readonly'),
    '#required' => TRUE,
  );

  $form['search']['emailee_nid'] = array(
    '#type' => 'hidden',
    '#required' => TRUE,
    '#attributes' => array('id' => 'edit-emailee-nid'),
  );


  $form['email_content'] = [
    '#type' => 'fieldset',
    '#collapsible' => FALSE
  ];
  $form['email_content']['subject'] = [
    '#type' => 'textfield',
    '#title' => t('Subject'),
    '#required' => TRUE,
    '#default_value' => $cnode->title,
  ];
  $form['email_content']['body'] = [
    '#type' => 'textarea',
    '#title' => t('Email body'),
    '#required' => TRUE,
    '#default_value' => $cnode->field_body[LANGUAGE_NONE][0]["value"],
  ];
  $form['email_content']['name'] = [
    '#type' => 'textfield',
    '#title' => t('Your name'),
    '#required' => TRUE
  ];
  $form['email_content']['email'] = [
    '#type' => 'textfield',
    '#title' => t('Your email'),
    '#required' => TRUE
  ];
  $form['email_content']['spam'] = [
    '#type' => 'checkbox',
    '#title' => t('Would you like to join the Animal Liberation Qld email list'),
  ];
  $form['email_content']['submit'] = [
    '#type' => 'submit',
    '#value' => t('Send'),
  ];

  return $form;
}

/**
 * Implements of hook_theme()
 */
function alq_mps_theme() {
  return [
    'alq_mps_email_form' => [
      'render element' => 'form',
      'template' => 'theme/email-form',
    ],
  ];
}

/**
 * Check whether a string has any tags (according to strip_tags) in it
 *
 * @param $value
 * @return bool
 */
function hasHtml($value) {
  return strip_tags($value) !== $value;
}

/**
 * Implements hook_form_validate()
 *
 * @param $form
 * @param $form_state
 */
function alq_mps_email_form_validate($form, &$form_state) {
  $values = $form_state['values'];

  $checkHtml = [
    'body',
    'subject',
    'email',
    'name'
  ];

  foreach ($checkHtml as $field) {
    if (hasHtml($values[$field])) {
      form_set_error($field, t('Invalid value, please remove links etc.'));
    }
  }

  if (!valid_email_address($values['email'])) {
    form_set_error('email', t('Invalid email address.'));
  }
}

/**
 * Implements hook_form_submit()
 *
 * @param $form
 * @param $form_state
 */
function alq_mps_email_form_submit($form, &$form_state) {
  $values = $form_state['values'];

  $insert = [
    'campaign_id' => $values['campaign_id'],
    'recipient' => $values['emailee_nid'],
    'body' => $values['body'],
    'subject' => $values['subject'],
    'from_email' => $values['email'],
    'from_name' => $values['name'],
    'spam' => $values['spam'],
    'created' => time()
  ];

  if (drupal_write_record(ALQ_EMAILS_TABLE, $insert)) {
    drupal_set_message('Successfully created email, it will be sent shortly');
    $_SESSION['alq_mps_email_form_submitted'] = TRUE;
  }
  else {
    drupal_set_message('Error sending email, please use our Contact form to let us know what went wrong', 'error');
  }
}
