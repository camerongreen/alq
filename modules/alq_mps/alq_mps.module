<?php
/**
 * @file
 * Provides the ability to store, administer and email members of parliament
 *
 * To install, first install alq_mps_feature, then install alq_mps_perms_feature
 */

include_once(drupal_get_path('module', 'alq_mps') . '/alq_mps_install.inc');

define('ALQ_MAX_EMAILS_PER_RUN', 100); // hostgator limit is 500 per hour

define('ALQ_ELECTORATES_TABLE', 'alq_electorates');
define('ALQ_EMAILS_TABLE', 'alq_emails');
define('ALQ_NODE_REF_TABLE', 'field_data_field_parent_article');
define('ALQ_EMAILEE_REF_TABLE', 'field_data_field_emailee');

define('ALQ_EMAIL_SUCCESS_STATUS', 'successfully queued');

/**
 * Implements hook menu
 */
function alq_mps_menu() {
  $items['alq-mps'] = [
    'page callback' => 'alq_mps_search',
    'access callback' => 'user_access',
    'access arguments' => ['access email campaigns'],
  ];

  $items['admin/workbench/alq-mps'] = [
    'title' => 'Email campaigns',
    'page callback' => 'alq_mps_admin',
    'access callback' => 'user_access',
    'access arguments' => ['administer email campaigns'],
    'type' => MENU_NORMAL_ITEM,
  ];
  $items['admin/workbench/alq-mps/csv'] = [
    'title' => 'Download CSV',
    'page callback' => 'alq_mps_admin_csv',
    'access callback' => 'user_access',
    'access arguments' => ['administer email campaigns'],
    'type' => MENU_CALLBACK,
  ];
  return $items;
}

/**
 * Implements hook_block_info().
 */
function alq_mps_block_info() {
  return array(
    'alq_mps_email_campaign_display' => array(
      'info' => t('ALQ MPS Email Campaign display'),
    ),
    'alq_mps_email_campaign_stats' => array(
      'info' => t('ALQ MPS Email Campaign statistics'),
    ),
  );
}


/**
 * Implements hook_block_view().
 */
function alq_mps_block_view($delta = '') {
  $block = NULL;

  switch ($delta) {
    case 'alq_mps_email_campaign_display':
      $block['subject'] = t('Take Action Now!');
      // only display on node pages
      if (arg(0) == 'node' && is_numeric(arg(1))) {
        $node = node_load(arg(1));
        $block['content'] = alq_mps_get_email_campaign($node);
      }
      break;
    case 'alq_mps_email_campaign_stats':
      $block['subject'] = t('Campaign statistics');
      // only display on node pages
      if (arg(0) == 'node' && is_numeric(arg(1))) {
        $node = node_load(arg(1));
        $block['content'] = alq_mps_get_email_campaign_stats($node);
      }
      break;
  }

  return $block;
}

/**
 * Implements hook_permission().
 */
function alq_mps_permission() {
  return [
    'administer email campaigns' => [
      'title' => t('Administer the email campaigns'),
    ],
    'access email campaigns' => [
      'title' => t('Access email campaigns'),
    ],
  ];
}

/**
 * Implements hook_cron
 */
function alq_mps_cron() {
  alq_mps_send_emails();
  alq_mps_cleanup_emails();
}

/**
 * Grabs the ALQ_MAX_EMAILS_PER_RUN most recent emails which haven't been
 * actioned and tries to send them
 */
function alq_mps_send_emails() {
  $query = db_select(ALQ_EMAILS_TABLE, 'emt');
  $query->isNull('emt.actioned')
    ->fields('emt')
    ->orderBy('created')
    ->range(0, ALQ_MAX_EMAILS_PER_RUN);

  $emails = $query->execute();

  $emailCount = $emails->rowCount();
  $errors = 0;

  $cacheDisabled = TRUE;
  $emaileeCache = [];

  foreach ($emails as $email) {
    // try and cache the emailees we don't have to keep getting them
    // from the database
    if ($cacheDisabled || !array_key_exists($email->recipient, $emaileeCache)) {
      $recipient = node_load($email->recipient);
      $recipient->offices = [];
      foreach ($recipient->field_office[LANGUAGE_NONE] as $entity_id) {
        $recipient->offices[] = entity_load('field_collection_item', [$entity_id['value']]);
      }
      $emaileeCache[$email->recipient] = $recipient;
    }
    $emailee = $emaileeCache[$email->recipient];

    // send the email, checking the result.  If it is sent, we send the user
    // a confirmation email
    $result = alq_mps_email($emailee, $email);
    $confirmation_sent = 0;
    if ($result['result'] == TRUE) {
      $confirmation_result = alq_mps_confirmation_email($email);
      if ($confirmation_result['result'] == TRUE) {
        $confirmation_sent = 1;
      }
      else {
        watchdog('alq_mps', t('Error sending campaign confirmation email - @id', ['@id' => $email->id]));
      }
    }
    else {
      watchdog('alq_mps', t('Error sending campaign email - @id', ['@id' => $email->id]));
      $errors++;
    }
    // Add email to log
    alq_mps_record_email_status($email, $result, $confirmation_sent);
  }

  if ($emailCount > 0) {
    watchdog('alq_mps', t('alq_mps cron run. @emails campaign email/s found (error/s @errors)', [
      '@emails' => $emailCount,
      '@errors' => $errors
    ]));
  }
}

/**
 * Cleans up actioned emails older than a year
 */
function alq_mps_cleanup_emails() {
  $query = db_delete(ALQ_EMAILS_TABLE)
    ->isNotNull('actioned')
    ->condition('actioned', strtotime('-1 year'), '<');

  $emails = $query->execute();

  if ($emails > 0) {
    watchdog('alq_mps', t('alq_mps cron run. cleaned up @emails emails', [
      '@emails' => $emails
    ]));
  }
}

/**
 * Sends an email and records result in ALQ_MPS_EMAIL_TABLE
 *
 * @param $recipient node_wrapper from entity api
 * @param $fields
 * @return boolean
 */
function alq_mps_email($recipient, $fields) {
  $module = 'alq_mps';
  $key = 'campaign_message';
  $from = $fields->from_email;
  $language = language_default();
  $send = TRUE;

  // don't email people when in development
  if (module_exists('devel')) {
    $to = variable_get('site_mail');
  }
  else {
    // only deal with first office for time being
    $office = array_shift($recipient->offices[0]);
    $to = $office->field_email[LANGUAGE_NONE][0]['email'];
  }

  return drupal_mail($module, $key, $to, $language, (array) $fields, $from, $send);
}

/**
 *
 * Sends a confirmation email and records result in ALQ_MPS_EMAIL_TABLE
 *
 * @param $fields
 * @return boolean
 */
function alq_mps_confirmation_email($fields) {
  $module = 'alq_mps';
  $key = 'campaign_confirmation_message';
  $from = variable_get('site_mail');
  $language = language_default();
  $send = TRUE;

  // don't email people when in development
  if (module_exists('devel')) {
    $to = variable_get('site_mail');
  }
  else {
    // responding to the person who sent the message
    $to = $fields->from_email;
  }

  return drupal_mail($module, $key, $to, $language, (array) $fields, $from, $send);
}

/**
 * Check the email result status and write the actioned date
 * and status into the emails table
 *
 * @param $fields  fields to update in db
 * @param $result   result of email attempt
 * @param $confirmation_sent  has a confirmation email been sent
 */
function alq_mps_record_email_status($fields, $result, $confirmation_sent) {
  $fields->actioned = getBrizzyTime();
  $fields->confirmation_sent = $confirmation_sent;

  if ($result['result'] == TRUE) {
    $fields->status = ALQ_EMAIL_SUCCESS_STATUS;
  }
  else {
    $fields->status = 'Error, please check watchdog logs';
  }

  if (!drupal_write_record(ALQ_EMAILS_TABLE, $fields, 'id')) {
    watchdog('alq_mps', t('Error saving email sending status to logs'));
  }
}

/**
 * Implements hook_mail()
 *
 * @param $key
 * @param $message
 * @param $params
 */
function alq_mps_mail($key, &$message, $params) {
  switch ($key) {
    case 'campaign_message':
      $message['subject'] = check_plain($params['subject']);
      $body = alq_mps_format_email($key, $params);
      $message['body'][] = check_plain($body);
      break;
    case 'campaign_confirmation_message':
      $response = alq_mps_confirmation_email_html($key, $params);
      $message['subject'] = check_plain($response['subject']);
      $message['body'][] = $response['body'];
      break;
  }
}

/**
 * Format the email to the emailee
 *
 * @param $key
 * @param $params
 * @return  string $body
 */
function alq_mps_format_email($key, $params) {
  $returnVal = $params['body'] . "\n";
  $returnVal .= "\n--\n";
  $returnVal .= $params['from_name'] . "\n";
  $returnVal .= $params['from_email'] . "\n";
  $returnVal .= $params['from_address'] . "\n";

  return $returnVal;
}

/**
 * Get confirmation email html
 *
 * @param $key
 * @param $params
 * @return  array ['subject', 'body']
 */
function alq_mps_confirmation_email_html($key, $params) {
  $campaign = node_load($params['campaign_id']);

  $subject = $campaign->field_confirmation_subject[LANGUAGE_NONE][0]["value"];
  $body = $campaign->field_confirmation_subject[LANGUAGE_NONE][0]["value"];

  return [
    'subject' => $subject,
    'body' => $body
  ];
}


/**
 * Menu callback for mps search
 */
function alq_mps_search($search) {
  $results = [];
  if (strlen($search) > 2) {
    // first we get a listing of electorates which map
    // to the postcode or suburb
    $query = db_select(ALQ_ELECTORATES_TABLE, 'ele');
    $query->join('field_data_field_electorate', 'fel', 'ele.state_district = fel.field_electorate_value');
    $query->join('node', 'n', 'n.nid = fel.entity_id');
    $query->condition(
      db_or()
        ->condition('ele.locality', '%' . db_like($search) . '%', 'LIKE')
        ->condition('ele.postcode', db_like($search) . '%', 'LIKE')
    );
    $query->condition('fel.entity_type', 'node', '=')
      ->fields('n', [
        'title',
        'nid'
      ])
      ->fields('ele', [
        'locality',
        'state_district',
        'postcode'
      ]);

    $query->orderBy('ele.locality', 'ASC');
    $query->groupBy('ele.locality');
    $query->groupBy('ele.postcode');
    $query->groupBy('n.nid');

    $results = $query->execute()->fetchAll();
  }

  drupal_json_output($results);
}

/**
 * Function to be called which shows the email statistics
 *
 * @param $node
 * @return string
 */
function alq_mps_get_email_campaign_stats($node) {
  drupal_add_js('//www.gstatic.com/charts/loader.js', ['type' => 'external']);
  drupal_add_js(drupal_get_path('module', 'alq_mps') . '/theme/alq-mps-stats.js');

  $emails = alq_mps_get_email_campaign_emails($node->nid);

  if ($emails) {
    $sent = 0;
    $unsent = 0;
    $errors = 0;

    foreach ($emails as $email) {
      if ($email->actioned) {
        if ($email->status === ALQ_EMAIL_SUCCESS_STATUS) {
          ++$sent;
        }
        else {
          ++$errors;
        }
      }
      else {
        ++$unsent;
      }
    }

    drupal_add_js(['alq_mps' => [
      'emails' => $emails,
      'ALQ_EMAIL_SUCCESS_STATUS' => ALQ_EMAIL_SUCCESS_STATUS
    ]], ['type' => 'setting']);

    return theme('alq_mps_email_campaign_stats', [
      'emails' => $emails,
      'sent' => $sent,
      'errors' => $errors,
      'unsent' => $unsent
    ]);
  }

  return 'No emails sent';
}

/**
 * Function to be called which shows the email statistics
 *
 * @param $campaignId
 * @return string
 */
function alq_mps_get_email_campaign_emails($campaignId) {
  $query = db_select(ALQ_EMAILS_TABLE, 'aet');
  $query->condition('aet.campaign_id', $campaignId, '=');
  $query->fields('aet');
  $query->orderBy('created', 'DESC');

  return $query->execute()->fetchAll();
}

/**
 * Function to be called which shows the form, loads up the JS etc libraries
 *
 * @param $node
 * @return string
 */
function alq_mps_get_email_campaign($node) {
  if ($cid = alq_mps_has_email_campaign($node->nid)) {
    if (isset($_SESSION) && array_key_exists('alq_mps_email_form_submitted', $_SESSION)) {
      unset($_SESSION['alq_mps_email_form_submitted']);
      return '<h2>Thanks for your submission</h2>';
    }
    else {
      drupal_add_library('system', 'jquery.cookie');
      drupal_add_css('//maxcdn.bootstrapcdn.com/bootstrap/3.3.6/css/bootstrap.min.css', ['type' => 'external']);
      drupal_add_js('//maxcdn.bootstrapcdn.com/bootstrap/3.3.6/js/bootstrap.js', ['type' => 'external']);
      drupal_add_js(drupal_get_path('module', 'alq_mps') . '/theme/alq-mps.js');
      $cnode = node_load($cid);
      $form = drupal_get_form('alq_mps_email_form', $cnode);
      return drupal_render($form);
    }
  }
  return '';
}

/**
 * Email campaigns each have a node reference in them
 * If this node has an email campaign, return its id, otherwise false
 *
 * @param $nid
 * @return mixed  false or campaign id
 */
function alq_mps_has_email_campaign($nid) {
  $query = db_select(ALQ_NODE_REF_TABLE, 'nrf');
  $query->condition('nrf.entity_type', 'node', '=')
    ->condition('nrf.field_parent_article_nid', $nid, '=');

  $query->fields('nrf', [
    'entity_id'
  ]);

  $result = $query->execute();

  if ($result) {
    return $result->fetchField(0);
  }

  return FALSE;
}

/**
 * Email campaigns may have a emailee reference in them
 * If this campaign has an emailee, return its id, otherwise false
 *
 * @param $nid
 * @return mixed  emailee nid or false
 */
function alq_mps_is_defined_list($nid) {
  $query = db_select(ALQ_EMAILEE_REF_TABLE, 'erf');
  $query->condition('erf.entity_type', 'node', '=')
    ->condition('erf.entity_id', $nid, '=');
  $query->fields('erf', [
    'field_emailee_nid'
  ]);

  $result = $query->execute();

  if ($result) {
    return $result->fetchField(0);
  }

  return FALSE;
}

/**
 * Implementation of hook form, with loaded campaign node to
 * prefill fields
 *
 * @param $form
 * @param $form_state
 * @param $cnode
 * @return mixed
 */
function alq_mps_email_form($form, &$form_state, $cnode) {
  $classes = ['form-horizontal'];

  if (!isset($form['#attributes']['class'])) {
    $form['#attributes']['class'] = $classes;
  }
  else {
    $form['#attributes']['class'] = array_merge($form['#attributes']['class'], $classes);
  }

  // check if it is an email just to one person
  // eid will be true if it is
  $eid = alq_mps_is_defined_list($cnode->nid);

  $emailee = NULL;

  if ($eid) {
    $emailee = node_load($eid);
  }

  $form['campaign_id'] = [
    '#type' => 'hidden',
    '#required' => TRUE,
    '#default_value' => $cnode->nid,
  ];

  // if we are allowing the user to search for a member
  // then add the suburb search field
  if (!$eid) {
    $form['suburb'] = [
      '#type' => 'textfield',
      '#title' => t('Find your member'),
      '#required' => TRUE,
      '#attributes' => [
        'autocomplete' => 'off',
        'placeholder' => t('Search using your suburb or postcode'),
        'class' => ['form-control', 'suburb-search']
      ]
    ];
  }

  $form['emailee_name'] = [
    '#title' => 'Email to',
    '#type' => 'textfield',
    '#required' => TRUE,
    '#attributes' => [
      'class' => ['form-control'],
      'readonly' => 'readonly',
    ]
  ];

  if ($eid) {
    $form['emailee_name']['#value'] = $emailee->title;
  }

  if ($eid) {
    if (is_array($emailee->field_position) && array_key_exists(LANGUAGE_NONE, $emailee->field_position)) {
      $form['emailee_position'] = [
        '#title' => 'Position',
        '#type' => 'textfield',
        '#default_value' => str_replace("\n", ' ', $emailee->field_position[LANGUAGE_NONE][0]["value"]),
        '#attributes' => [
          'class' => ['form-control'],
          'readonly' => 'readonly',
        ]
      ];
    }
  }
  else {
    $form['emailee_electorate'] = [
      '#title' => 'Member for',
      '#type' => 'textfield',
      '#attributes' => [
        'class' => ['form-control'],
        'readonly' => 'readonly',
      ]
    ];
  }

  $form['emailee_nid'] = [
    '#type' => 'hidden',
    '#required' => TRUE,
    '#attributes' => [
      'id' => 'edit-emailee-nid'
    ],
  ];

  if ($eid) {
    $form['emailee_nid']['#value'] = $eid;
  }

  $form['subject'] = [
    '#type' => 'textfield',
    '#title' => t('Subject'),
    '#required' => TRUE,
    '#default_value' => $cnode->title,
    '#attributes' => [
      'class' => ['form-control']
    ]
  ];
  $form['body'] = [
    '#type' => 'textarea',
    '#title' => t('Email text'),
    '#required' => TRUE,
    '#default_value' => $cnode->field_body[LANGUAGE_NONE][0]["value"],
    '#attributes' => [
      'class' => ['form-control']
    ]
  ];
  $form['name'] = [
    '#type' => 'textfield',
    '#title' => t('Your name'),
    '#required' => TRUE,
    '#attributes' => [
      'class' => ['form-control']
    ]
  ];
  $form['email'] = [
    '#type' => 'textfield',
    '#title' => t('Your email'),
    '#required' => TRUE,
    '#attributes' => [
      'class' => ['form-control']
    ]
  ];
  // if the email is to a defined email/s then ask the user
  // to manually enter their postcode
  if ($eid) {
    $form['suburb'] = [
      '#type' => 'textfield',
      '#title' => t('Suburb'),
      '#required' => TRUE,
      '#attributes' => [
        'placeholder' => t('Suburb or postcode'),
        'class' => ['form-control']
      ]
    ];
  }

  $form['spam'] = [
    '#type' => 'checkbox',
    '#title' => t('Would you like to join the Animal Liberation Qld email list'),
    '#attributes' => [
      'class' => ['form-control']
    ]
  ];

  if (module_exists('image_captcha')) {
    $form['captcha'] = [
      '#type' => 'captcha',
      '#captcha_type' => 'image_captcha/Image',
    ];
  }
  $form['submit'] = [
    '#type' => 'submit',
    '#prefix' => '<div class="form-group"><div class="col-sm-offset-3 col-sm-9">',
    '#suffix' => '</div></div>',
    '#value' => t('Send email'),
    '#attributes' => [
      'class' => ['btn btn-primary']
    ]
  ];

  return $form;
}

/**
 * Implements of hook_theme()
 */
function alq_mps_theme() {
  return [
    'alq_mps_email_form' => [
      'render element' => 'form',
      'template' => 'theme/email-form',
    ],
    'alq_mps_email_campaign_stats' => [
      'template' => 'theme/email-campaign-stats',
      'variables' => [
        'emails' => NULL,
        'sent' => NULL,
        'unsent' => NULL,
        'errors' => NULL
      ]
    ],
  ];
}

/**
 * Check whether a string has any tags (according to strip_tags) in it
 *
 * @param $value
 * @return bool
 */
function hasHtml($value) {
  return strip_tags($value) !== $value;
}

/**
 * Implements hook_form_validate()
 *
 * @param $form
 * @param $form_state
 */
function alq_mps_email_form_validate($form, &$form_state) {
  $values = $form_state['values'];

  $checkHtml = [
    'body',
    'subject',
    'suburb',
    'email',
    'name'
  ];

  foreach ($checkHtml as $field) {
    if (isset($values[$field]) && hasHtml($values[$field])) {
      form_set_error($field, t('Invalid value, please remove links etc.'));
    }
  }

  if (!valid_email_address($values['email'])) {
    form_set_error('email', t('Invalid email address.'));
  }
}

/**
 * Implements hook_form_submit()
 *
 * @param $form
 * @param $form_state
 */
function alq_mps_email_form_submit($form, &$form_state) {
  $values = $form_state['values'];

  $insert = [
    'campaign_id' => $values['campaign_id'],
    'recipient' => $values['emailee_nid'],
    'body' => $values['body'],
    'subject' => $values['subject'],
    'from_email' => $values['email'],
    'from_address' => $values['suburb'],
    'from_name' => $values['name'],
    'spam' => $values['spam'],
    'created' => getBrizzyTime()
  ];

  user_cookie_save([
    'from_email' => $values['email'],
    'from_name' => $values['name'],
  ]);

  if (drupal_write_record(ALQ_EMAILS_TABLE, $insert)) {
    drupal_set_message('Successfully created email, it will be sent shortly');
    $_SESSION['alq_mps_email_form_submitted'] = TRUE;
  }
  else {
    drupal_set_message('Error sending email, please use our Contact form to let us know what went wrong', 'error');
  }
}

/**
 * Menu callback for viewing sent emails
 */
function alq_mps_admin() {
  $query = db_select(ALQ_EMAILS_TABLE, 'emt');
  $num_rows = $query->countQuery()->execute()->fetchField();
  $num_per_page = 40;
  $page = pager_default_initialize($num_rows, $num_per_page);
  $offset = $num_per_page * $page;
  $charsOfEmailToShow = 250;

  $query->fields('emt');
  $query->orderBy('emt.created', 'DESC');
  $query->range($offset, $num_per_page);
  $results = $query->execute();

  // output them in a paged table
  $rows = [];

  foreach ($results as $result) {
    $rows[] = [
      $result->id,
      $result->subject,
      $result->from_name,
      $result->from_email,
      $result->spam,
      substr($result->body, 0, $charsOfEmailToShow),
      l($result->campaign_id, '/node/' . urlencode($result->campaign_id)),
      l($result->recipient, '/node/' . urlencode($result->recipient)),
      date('Y-m-d h:m:s', $result->created),
      $result->actioned ? date('Y-m-d h:m:s', $result->actioned) : $result->actioned,
      $result->confirmation_sent,
      $result->status
    ];
  }

  $links = [
    l('View all emailees', 'admin/workbench/alq-mps/emailees'),
    l('Download emails for current month', 'admin/workbench/alq-mps/csv/' . date('Y-M'), [
      'attributes' => [
        'target' => '_blank',
        'download' => NULL
      ]
    ])
  ];

  $output = '<ul><li>' . implode('</li><li>', $links) . '</li></ul>';

  $output .= theme('table', [
    'header' => [
      'ID',
      'Subject',
      'From',
      'Email',
      'Spam',
      'Body (first ' . $charsOfEmailToShow . ' Chars)',
      'Campaign',
      'Recipient',
      'Created',
      'Actioned',
      'Confirmation sent',
      'Status'
    ],
    'rows' => $rows
  ]);

  $output .= theme('pager');

  return $output;
}

/**
 * Get time in Brisbane
 *
 * @return int timestamp
 */
function getBrizzyTime() {
  $timezone = 'Australia/Brisbane';
  $datetime = new DateTime('now', new DateTimeZone($timezone));
  return $datetime->getTimestamp();
}

/**
 * Menu callback for downloading email statuses
 *
 * @param String  YYYY-MMM
 */
function alq_mps_admin_csv($date = NULL) {
  // should be good for the next thousand years ot so
  if (!preg_match('/2\d{3}-\w{3}/', $date)) {
    $date = date('Y-M', getBrizzyTime());
  }

  $unixTimeFrom = strtotime($date);

  $query = db_select(ALQ_EMAILS_TABLE, 'emt');
  $query->fields('emt');
  $query->condition('emt.created', $unixTimeFrom, '>=');
  // so we get essentially get a second before midnight
  $unixTimeTo = strtotime(date('Y-m-t 23:59:59', $unixTimeFrom));
  $query->condition('emt.created', $unixTimeTo, '<');
  $query->orderBy('emt.created', 'DESC');
  $results = $query->execute();

  drupal_add_http_header('Content-Type', 'text/csv; utf-8');
  drupal_add_http_header('Content-Disposition', 'attachment;filename=alq-emails-' . $date . '.csv');
  drupal_add_http_header('Expires', '0');
  drupal_add_http_header('Pragma', 'no-cache');

  // maybe t these
  $keys = [
    'ID',
    'Subject',
    'From',
    'Email',
    'Spam',
    'Body',
    'Campaign',
    'Recipient',
    'Created',
    'Actioned',
    'Confirmation Sent',
    'Status'
  ];

  $out = fopen('php://output', 'w');
  fputcsv($out, $keys);

  foreach ($results as $result) {
    $row = [
      $result->id,
      $result->subject,
      $result->from_name,
      $result->from_email,
      $result->spam,
      $result->body,
      l($result->campaign_id, '/node/' . urlencode($result->campaign_id)),
      l($result->recipient, '/node/' . urlencode($result->recipient)),
      date('Y-m-d h:m:s', $result->created),
      $result->actioned ? date('Y-m-d h:m:s', $result->actioned) : $result->actioned,
      $result->confirmation_sent,
      $result->status
    ];
    fputcsv($out, $row);
  }

  fclose($out);
  drupal_exit();
}
