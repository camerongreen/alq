<?php

/**
 * @file
 * Provides the ability to store, administer and email members of parliament.
 *
 * To install, first install alq_mps_feature, then install
 *   alq_mps_perms_feature.
 */

module_load_include('inc', 'alq_mps', 'alq_mps_install');
module_load_include('inc', 'alq_mps', 'alq_mps_export');

// Hostgator limit is 500 per hour.
define('ALQ_MPS_MAX_EMAILS_PER_RUN', 200);

define('ALQ_MPS_ELECTORATES_TABLE', 'alq_electorates');
define('ALQ_MPS_EMAILS_TABLE', 'alq_emails');
define('ALQ_MPS_NODE_REF_TABLE', 'field_data_field_parent_article');
define('ALQ_MPS_EMAILEE_REF_TABLE', 'field_data_field_emailee');
define('ALQ_MPS_CAMPAIGN_TYPE_TABLE', 'field_data_field_campaign_type');

define('ALQ_MPS_EMAIL_SUCCESS_STATUS', 'successfully queued');

/**
 * Implements hook menu.
 */
function alq_mps_menu() {
  $items['alq-mps'] = [
    'page callback' => 'alq_mps_search',
    'access callback' => 'user_access',
    'access arguments' => ['access email campaigns'],
  ];

  $items['admin/workbench/alq-mps'] = [
    'title' => 'Email campaigns',
    'page callback' => 'alq_mps_admin',
    'access callback' => 'user_access',
    'access arguments' => ['administer email campaigns'],
    'type' => MENU_NORMAL_ITEM,
  ];

  $items['admin/workbench/alq-mps/csv'] = [
    'title' => 'Download CSV',
    'page callback' => 'alq_mps_admin_csv',
    'access callback' => 'user_access',
    'access arguments' => ['administer email campaigns'],
    'type' => MENU_CALLBACK,
  ];

  $items['admin/workbench/alq-mps/emailees/csv'] = [
    'title' => 'Download Emailees as CSV',
    'page callback' => 'alq_mps_admin_emailees_csv',
    'access callback' => 'user_access',
    'access arguments' => ['administer email campaigns'],
    'type' => MENU_CALLBACK,
  ];

  return $items;
}

/**
 * Implements hook_block_info().
 */
function alq_mps_block_info() {
  return [
    'alq_mps_email_campaign_display' => [
      'info' => t('ALQ MPS Email Campaign display'),
    ],
    'alq_mps_email_campaign_stats' => [
      'info' => t('ALQ MPS Email Campaign statistics'),
    ],
  ];
}

/**
 * Implements hook_block_view().
 *
 * @throws \Exception
 */
function alq_mps_block_view($delta = '') {
  $block = NULL;

  switch ($delta) {
    case 'alq_mps_email_campaign_display':
      $block['subject'] = t('Take Action Now!');
      // Only display on node pages.
      if (arg(0) == 'node' && is_numeric(arg(1))) {
        $node = node_load(arg(1));
        $block['content'] = alq_mps_get_email_campaign($node);
      }
      break;

    case 'alq_mps_email_campaign_stats':
      $block['subject'] = t('Campaign statistics');
      // Only display on node pages.
      if (arg(0) == 'node' && is_numeric(arg(1))) {
        $node = node_load(arg(1));
        $block['content'] = alq_mps_get_email_campaign_stats($node);
      }
      break;
  }

  return $block;
}

/**
 * Implements hook_permission().
 */
function alq_mps_permission() {
  return [
    'administer email campaigns' => [
      'title' => t('Administer the email campaigns'),
    ],
    'access email campaigns' => [
      'title' => t('Access email campaigns'),
    ],
  ];
}

/**
 * Implements hook_cron().
 *
 * @throws \Exception
 */
function alq_mps_cron() {
  alq_mps_send_emails();
  // alq_mps_cleanup_emails();
}

/**
 * Loads up the CC fields for an email campaign.
 *
 * @param int $campaign_id
 *   Campaign to check.
 *
 * @return array
 *   Return CCs to email.
 */
function alq_mps_get_ccs($campaign_id) {
  $emails = [];
  $campaign = node_load($campaign_id);
  if (property_exists($campaign, 'field_cc')
    && array_key_exists(LANGUAGE_NONE, $campaign->field_cc)
  ) {
    foreach ($campaign->field_cc[LANGUAGE_NONE] as $email) {
      $emails[] = $email['email'];
    }
  }
  return $emails;
}

/**
 * Loads up the footer field for an email campaign.
 *
 * @param int $campaign_id
 *   Campaign id to retreive footer for.
 *
 * @return string|bool
 *   Footer for email campaign or FALSE.
 */
function alq_mps_get_footer($campaign_id) {
  $campaign = node_load($campaign_id);
  return property_exists($campaign, 'field_footer') && array_key_exists(LANGUAGE_NONE, $campaign->field_footer) ? $campaign->field_footer[LANGUAGE_NONE][0]['value'] : FALSE;
}

/**
 * Send queued emails.
 *
 * Grabs the ALQ_MAX_EMAILS_PER_RUN most recent emails which haven't been
 * actioned and tries to send them.
 *
 * @throws \Exception
 */
function alq_mps_send_emails() {
  $emails = alq_mps_get_email_batch();

  $emailCount = $emails->rowCount();

  // Use this to count the number of emails we can send per run
  // we'll ignore errors in doing this.
  $sentEmails = 0;

  $errors = 0;

  foreach ($emails as $email) {
    // Add one each for the email and the confirmation.
    $sentEmails += 2;
    // If this would push us over the max emails per run, break out.
    if ($sentEmails > ALQ_MPS_MAX_EMAILS_PER_RUN) {
      break;
    }
    $recipient = node_load($email->recipient);
    $recipient->offices = [];
    foreach ($recipient->field_office[LANGUAGE_NONE] as $entity_id) {
      $recipient->offices[] = entity_load('field_collection_item', [$entity_id['value']]);
    }

    // Send the email, checking the result.  If it is sent, we send the user
    // a confirmation email.
    $result = alq_mps_email($recipient, $email);
    $confirmation_sent = 0;
    if ($result['result'] == TRUE) {
      $emailCount++;
      $confirmation_result = alq_mps_confirmation_email($email);
      if ($confirmation_result['result'] == TRUE) {
        $confirmation_sent = 1;
        $emailCount++;
      }
      else {
        watchdog('alq_mps', 'Error sending campaign confirmation email - @id', ['@id' => $email->id]);
      }
    }
    else {
      watchdog('alq_mps', 'Error sending campaign email - @id', ['@id' => $email->id]);
      $errors++;
    }

    // Add email to log.
    alq_mps_record_email_status($email, $result, $confirmation_sent);
  }

  if ($emailCount > 0) {
    watchdog('alq_mps', 'alq_mps cron run. @emails campaign email/s found (error/s @errors)', [
      '@emails' => $emailCount,
      '@errors' => $errors,
    ]);
  }
}

/**
 * Get a batch of emails with null actions, limited by run.
 *
 * @return \DatabaseStatementInterface|null
 *   Return email batch.
 */
function alq_mps_get_email_batch() {
  /* @var \SelectQueryInterface $query */
  $query = db_select(ALQ_MPS_EMAILS_TABLE, 'emt');
  $query->isNull('emt.actioned')
    ->fields('emt')
    ->orderBy('created')
    ->range(0, ALQ_MPS_MAX_EMAILS_PER_RUN);

  return $query->execute();
}

/**
 * Cleans up actioned emails older than a year.
 */
function alq_mps_cleanup_emails() {
  $query = db_delete(ALQ_MPS_EMAILS_TABLE)
    ->isNotNull('actioned')
    ->condition('actioned', strtotime('-1 year'), '<');

  $emails = $query->execute();

  if ($emails > 0) {
    watchdog('alq_mps', 'alq_mps cron run. cleaned up @emails emails', [
      '@emails' => $emails,
    ]);
  }
}

/**
 * Sends an email and records result in ALQ_MPS_EMAIL_TABLE.
 *
 * @param object $recipient
 *   Send node_wrapper from entity api.
 * @param object $email
 *   Fields for email.
 *
 * @return array
 *   Result of drupal_mail.
 */
function alq_mps_email($recipient, $email) {
  $fields = (array) $email;
  $module = 'alq_mps';
  $key = 'campaign_message';
  $from = $email->from_email;
  if (!array_key_exists('headers', $fields)) {
    $fields['headers'] = [];
  }
  $fields['headers']['Reply-to'] = trim($from);
  $ccs = alq_mps_get_ccs($email->campaign_id);
  $fields['headers']['Cc'] = implode(',', $ccs);
  $language = language_default();
  $send = TRUE;

  // don't email people when in development.
  if (module_exists('devel')) {
    $to = variable_get('site_mail');
  }
  else {
    // Only deal with first office for time being.
    $office = array_shift($recipient->offices[0]);
    $to = $office->field_email[LANGUAGE_NONE][0]['email'];
  }

  return drupal_mail($module, $key, trim($to), $language, $fields, trim($from), $send);
}

/**
 * Sends a confirmation email and records result in ALQ_MPS_EMAIL_TABLE.
 *
 * @param object $email
 *   Fields to send.
 *
 * @return bool|array
 *   Result of drupal_mail.
 */
function alq_mps_confirmation_email($email) {
  $fields = (array) $email;
  $module = 'alq_mps';
  $key = 'campaign_confirmation_message';
  $from = variable_get('site_mail');
  $language = language_default();
  $send = TRUE;

  // don't email people when in development.
  if (module_exists('devel')) {
    $to = variable_get('site_mail');
  }
  else {
    // Responding to the person who sent the message.
    $to = $email->from_email;
  }

  return drupal_mail($module, $key, trim($to), $language, $fields, trim($from), $send);
}

/**
 * Email status.
 *
 * Check the email result status and write the actioned date
 * and status into the emails table.
 *
 * @param object $fields
 *   Fields to update in db.
 * @param array $result
 *   Result of email attempt.
 * @param string $confirmation_sent
 *   Has a confirmation email been sent.
 *
 * @throws \Exception
 */
function alq_mps_record_email_status($fields, array $result, $confirmation_sent) {
  $fields->actioned = get_brisbane_time();
  $fields->confirmation_sent = $confirmation_sent;

  if ($result['result'] == TRUE) {
    $fields->status = ALQ_MPS_EMAIL_SUCCESS_STATUS;
  }
  else {
    $fields->status = 'Error, please check watchdog logs';
  }

  if (!drupal_write_record(ALQ_MPS_EMAILS_TABLE, $fields, 'id')) {
    watchdog('alq_mps', 'Error saving email sending status to logs');
  }
}

/**
 * Implements hook_mail().
 */
function alq_mps_mail($key, &$message, $params) {
  switch ($key) {
    case 'campaign_message':
      $message['subject'] = check_plain($params['subject']);
      $body = alq_mps_format_email($params);
      $message['body'][] = check_plain($body);
      break;

    case 'campaign_confirmation_message':
      $response = alq_mps_confirmation_email_html($params);
      $message['subject'] = check_plain($response['subject']);
      $message['body'][] = $response['body'];
      break;
  }

  if (isset($params['headers']) && is_array($params['headers'])) {
    $message['headers'] += $params['headers'];
  }
}

/**
 * Format the email to the emailee.
 *
 * @param array $params
 *   Params to put in email.
 *
 * @return string
 *   Email body.
 */
function alq_mps_format_email(array $params) {
  $returnVal = $params['body'] . "\n";
  $returnVal .= "\n--\n";
  $returnVal .= $params['from_name'] . "\n";
  $returnVal .= $params['from_email'] . "\n";
  if (array_key_exists('from_address', $params) && !empty($params['from_address'])) {
    $returnVal .= $params['from_address'] . "\n";
  }

  return $returnVal;
}

/**
 * Get confirmation email html.
 *
 * @param array $params
 *   Params to put in email.
 *
 * @return array
 *   In form ['subject', 'body'].
 */
function alq_mps_confirmation_email_html(array $params) {
  $campaign = node_load($params['campaign_id']);

  $subject = $campaign->field_confirmation_subject[LANGUAGE_NONE][0]['value'];
  $body = $campaign->field_confirmation_html[LANGUAGE_NONE][0]['value'];
  $body = alq_mps_replace_tokens($body, ['name' => $params['from_name']]);

  return [
    'subject' => $subject,
    'body' => $body,
  ];
}

/**
 * Menu callback for mps search.
 *
 * @param string $search
 *   Term to search for.
 */
function alq_mps_search($search) {
  $results = [];
  if (strlen($search) > 2) {
    // First we get a listing of electorates which map
    // to the postcode or suburb.
    /* @var \SelectQueryInterface $query */
    $query = db_select(ALQ_MPS_ELECTORATES_TABLE, 'ele');
    $query->join('field_data_field_electorate', 'fel', 'ele.state_district = fel.field_electorate_value');
    $query->join('node', 'n', 'n.nid = fel.entity_id');
    $query->condition(
      db_or()
        ->condition('ele.locality', '%' . db_like($search) . '%', 'LIKE')
        ->condition('ele.postcode', db_like($search) . '%', 'LIKE')
    );
    $query->condition('fel.entity_type', 'node', '=')
      ->fields('n', [
        'title',
        'nid',
      ])
      ->fields('ele', [
        'locality',
        'state_district',
        'postcode',
      ]);

    $query->groupBy('ele.locality');
    $query->groupBy('ele.postcode');
    $query->groupBy('n.nid');

    $results = $query->execute()->fetchAll();
  }

  drupal_json_output($results);
}

/**
 * Function to be called which shows the email statistics.
 *
 * @param object $node
 *   Email campaign node to get stats for.
 *
 * @return string
 *   Themed stats.
 *
 * @throws \Exception
 */
function alq_mps_get_email_campaign_stats($node) {
  drupal_add_js('//www.gstatic.com/charts/loader.js', ['type' => 'external']);
  drupal_add_js(drupal_get_path('module', 'alq_mps') . '/theme/alq-mps-stats.js');

  $emails = alq_mps_get_email_campaign_emails($node->nid);

  if ($emails) {
    $sent = 0;
    $unsent = 0;
    $errors = 0;

    foreach ($emails as $email) {
      if ($email->actioned) {
        if ($email->status === ALQ_MPS_EMAIL_SUCCESS_STATUS) {
          ++$sent;
        }
        else {
          ++$errors;
        }
      }
      else {
        ++$unsent;
      }
    }

    drupal_add_js([
      'alq_mps' => [
        'emails' => $emails,
        'ALQ_EMAIL_SUCCESS_STATUS' => ALQ_MPS_EMAIL_SUCCESS_STATUS,
      ],
    ], ['type' => 'setting']);

    return theme('alq_mps_email_campaign_stats', [
      'emails' => $emails,
      'sent' => $sent,
      'errors' => $errors,
      'unsent' => $unsent,
    ]);
  }

  return 'No emails sent';
}

/**
 * Function to be called which shows the email statistics.
 *
 * @param int $campaignId
 *   Campaign id to get emails for.
 *
 * @return array
 *   List of emails.
 */
function alq_mps_get_email_campaign_emails($campaignId) {
  /* @var \SelectQueryInterface $query */
  $query = db_select(ALQ_MPS_EMAILS_TABLE, 'aet');
  $query->condition('aet.campaign_id', $campaignId, '=');
  $query->fields('aet');
  $query->orderBy('created', 'DESC');

  return $query->execute()->fetchAll();
}

/**
 * Function to be called which shows the form, loads up the JS etc libraries.
 *
 * @param object $node
 *   Campaign node.
 *
 * @return string
 *   Themed form.
 */
function alq_mps_get_email_campaign($node) {
  if ($cid = alq_mps_has_email_campaign($node->nid)) {
    if (isset($_SESSION) && array_key_exists('alq_mps_email_form_submitted', $_SESSION)) {
      unset($_SESSION['alq_mps_email_form_submitted']);
      return '<h2>' . t('Thanks for your submission') . '</h2><p>' . t('Please share the campaign using the links below') . '</p>';
    }

    drupal_add_library('system', 'jquery.cookie');
    drupal_add_js(drupal_get_path('module', 'alq_mps') . '/theme/alq-mps.js');
    $cnode = node_load($cid);
    $form = drupal_get_form('alq_mps_email_form', $cnode);
    return drupal_render($form);
  }
  return '';
}

/**
 * Does this have an email campaign?
 *
 * Email campaigns each have a node reference in them
 * If this node has an email campaign, return its id, otherwise false.
 *
 * @param int $nid
 *   Nid of campaign.
 *
 * @return int|bool
 *   False or campaign id.
 */
function alq_mps_has_email_campaign($nid) {
  /* @var \SelectQueryInterface $query */
  $query = db_select(ALQ_MPS_NODE_REF_TABLE, 'nrf');
  $query->condition('nrf.entity_type', 'node', '=')
    ->condition('nrf.field_parent_article_nid', $nid, '=');

  $query->fields('nrf', [
    'entity_id',
  ]);

  $result = $query->execute();

  if ($result) {
    return $result->fetchField();
  }

  return FALSE;
}

/**
 * Get type of campaign.
 *
 * Is this campaign to a list/search type or just a single person
 * campaign.
 *
 * @param int $nid
 *   Nid of campaign.
 *
 * @return string
 *   Campaign type.
 */
function alq_mps_get_campaign_type($nid) {
  // Not sure why I did it like this and didn't just load the node.
  /* @var \SelectQueryInterface $query */
  $query = db_select(ALQ_MPS_CAMPAIGN_TYPE_TABLE, 'fdfct');
  $query->condition('fdfct.entity_type', 'node', '=')
    ->condition('fdfct.entity_id', $nid, '=');
  $query->fields('fdfct', [
    'field_campaign_type_value',
  ]);

  $result = $query->execute();

  return $result->fetchField();
}

/**
 * Get whether address required.
 *
 * Should the user be asked for an address line.
 *
 * @param int $nid
 *   Nid of campaign.
 *
 * @return bool
 *   Whether to ask for address.
 */
function alq_mps_get_ask_for_address($nid) {
  $node = node_load($nid);

  $ask_for_address = field_get_items('node', $node, 'field_ask_for_address');

  return isset($ask_for_address[0]["value"]) && $ask_for_address[0]["value"] === "1";
}

/**
 * Return default emailess for campaign.
 *
 * Email campaigns may have a emailee reference in them
 * If this campaign has an emailee, return its id, otherwise false.
 *
 * @param int $nid
 *   Nid for emailee.
 *
 * @return int|bool
 *   Emailee nid or FALSE.
 */
function alq_mps_get_default_emailee($nid) {
  /* @var \SelectQueryInterface $query */
  $query = db_select(ALQ_MPS_EMAILEE_REF_TABLE, 'erf');
  $query->condition('erf.entity_type', 'node', '=')
    ->condition('erf.entity_id', $nid, '=');
  $query->fields('erf', [
    'field_emailee_nid',
  ]);

  $result = $query->execute();

  if ($result) {
    return $result->fetchField();
  }

  return FALSE;
}

/**
 * Implements hook_form().
 *
 * With additional campaign node to load fields.
 */
function alq_mps_email_form($form, &$form_state, $cnode) {
  if (module_exists('honeypot')) {
    honeypot_add_form_protection($form, $form_state, [
      'honeypot',
      'time_restriction',
    ]);
  }

  $classes = ['form-horizontal'];

  if (!isset($form['#attributes']['class'])) {
    $form['#attributes']['class'] = $classes;
  }
  else {
    $form['#attributes']['class'] = array_merge($form['#attributes']['class'], $classes);
  }

  $campaign_type = alq_mps_get_campaign_type($cnode->nid);
  $ask_for_address = alq_mps_get_ask_for_address($cnode->nid);

  // Check if there is a default emailer.
  $eid = alq_mps_get_default_emailee($cnode->nid);

  $emailee = NULL;

  if ($eid) {
    $emailee = node_load($eid);
  }

  $form['campaign_id'] = [
    '#type' => 'hidden',
    '#required' => TRUE,
    '#default_value' => $cnode->nid,
  ];

  // If we are allowing the user to search for a member
  // then add the suburb search field.
  if ($campaign_type === 'qld_state') {
    $form['suburb'] = [
      '#type' => 'textfield',
      '#title' => t('Find your member'),
      '#attributes' => [
        'autocomplete' => 'off',
        'placeholder' => t('Search using your suburb or postcode'),
        'class' => ['form-control', 'suburb-search'],
      ],
    ];

    $form['suburb_help'] = [
      '#type' => 'markup',
      '#markup' => t('If multiple electorates are listed, go here to <a href="https://results.ecq.qld.gov.au/state_district_maps" target="_blank"> find your electorate</a>.'),
    ];

    if ($emailee) {
      $form['suburb_default'] = [
        '#type' => 'markup',
        '#markup' => t('Outside of Queensland? <a href="javascript://" id="suburb-default">Click here</a>.'),
      ];
      $form['emailee_default_name'] = [
        '#type' => 'hidden',
        '#value' => $emailee->title,
        '#attributes' => [
          'id' => 'edit-emailee-default-name',
        ],
      ];
      $form['emailee_default_nid'] = [
        '#type' => 'hidden',
        '#value' => $emailee->nid,
        '#attributes' => [
          'id' => 'edit-emailee-default-nid',
        ],
      ];
    }
  }

  $form['emailee_name'] = [
    '#title' => 'Email to',
    '#type' => 'textfield',
    '#required' => TRUE,
    '#attributes' => [
      'class' => ['form-control'],
    ],
  ];

  if ($campaign_type === 'single') {
    $form['emailee_name']['#value'] = $emailee->title;

    if (is_array($emailee->field_position) && array_key_exists(LANGUAGE_NONE, $emailee->field_position)) {
      $form['emailee_position'] = [
        '#title' => 'Position',
        '#type' => 'textfield',
        '#default_value' => str_replace("\n", ' ', $emailee->field_position[LANGUAGE_NONE][0]['value']),
        '#attributes' => [
          'class' => ['form-control'],
          'readonly' => 'readonly',
        ],
      ];
    }
  }
  else {
    $form['emailee_electorate'] = [
      '#title' => 'Member for',
      '#type' => 'textfield',
      '#attributes' => [
        'class' => ['form-control'],
        'readonly' => 'readonly',
      ],
    ];
  }

  $form['emailee_nid'] = [
    '#type' => 'hidden',
    '#required' => TRUE,
    '#attributes' => [
      'id' => 'edit-emailee-nid',
    ],
  ];

  if ($campaign_type === 'single') {
    $form['emailee_nid']['#value'] = $eid;
  }

  $form['subject'] = [
    '#type' => 'textfield',
    '#title' => t('Subject'),
    '#required' => TRUE,
    '#default_value' => $cnode->title,
    '#attributes' => [
      'class' => ['form-control'],
    ],
  ];
  $form['body'] = [
    '#type' => 'textarea',
    '#title' => t('Email text'),
    '#required' => TRUE,
    '#default_value' => $cnode->field_body[LANGUAGE_NONE][0]['value'],
    '#attributes' => [
      'class' => ['form-control'],
    ],
  ];
  $form['default_body'] = [
    '#type' => 'hidden',
    '#default_value' => $cnode->field_body[LANGUAGE_NONE][0]['value'],
  ];

  $form['name'] = [
    '#type' => 'textfield',
    '#title' => t('Your name'),
    '#required' => TRUE,
    '#attributes' => [
      'class' => ['form-control'],
    ],
  ];
  $form['email'] = [
    '#type' => 'textfield',
    '#title' => t('Your email'),
    '#required' => TRUE,
    '#attributes' => [
      'class' => ['form-control'],
    ],
  ];

  // Should we ask the emailer for an address line?
  if ($ask_for_address) {
    $form['address'] = [
      '#type' => 'textfield',
      '#title' => t('Address'),
      '#required' => TRUE,
      '#attributes' => [
        'placeholder' => t('Street address'),
        'class' => ['form-control'],
      ],
    ];
  }

  // If the email is to a defined email/s then ask the user
  // to manually enter their postcode.
  if ($campaign_type === 'single') {
    $form['suburb'] = [
      '#type' => 'textfield',
      '#title' => t('Suburb'),
      '#required' => TRUE,
      '#attributes' => [
        'placeholder' => t('Suburb or postcode'),
        'class' => ['form-control'],
      ],
    ];
  }

  $form['spam'] = [
    '#type' => 'checkbox',
    '#title' => t('Would you like to join the Animal Liberation Qld email list'),
    '#attributes' => [
      'class' => ['form-con$rol'],
      'checked' => 'checked',
    ],
  ];

  $form['submit'] = [
    '#type' => 'submit',
    '#prefix' => '<div class="form-group"><div class="col-sm-offset-3 col-sm-9">',
    '#suffix' => '</div></div>',
    '#value' => t('Send email'),
    '#attributes' => [
      'class' => ['btn btn-primary'],
    ],
  ];

  return $form;
}

/**
 * Implements hook_theme().
 */
function alq_mps_theme() {
  return [
    'alq_mps_email_form' => [
      'render element' => 'form',
      'template' => 'theme/email-form',
    ],
    'alq_mps_email_campaign_stats' => [
      'template' => 'theme/email-campaign-stats',
      'variables' => [
        'emails' => NULL,
        'sent' => NULL,
        'unsent' => NULL,
        'errors' => NULL,
      ],
    ],
  ];
}

/**
 * Check whether a string has any tags (according to strip_tags) in it.
 *
 * @param string $value
 *   String with potential HTML.
 *
 * @return bool
 *   Does this have HTML IN it.
 */
function has_html($value) {
  return strip_tags($value) !== $value;
}

/**
 * Implements hook_form_validate().
 */
function alq_mps_email_form_validate($form, &$form_state) {
  $values = $form_state['values'];

  $checkHtml = [
    'body',
    'subject',
    'address',
    'suburb',
    'email',
    'name',
  ];

  foreach ($checkHtml as $field) {
    if (isset($values[$field]) && has_html($values[$field])) {
      form_set_error($field, t('Invalid value, please remove links etc.'));
    }
  }

  if (!valid_email_address(trim($values['email']))) {
    form_set_error('email', t('Invalid email address.'));
  }
}

/**
 * Implements hook_form_submit().
 */
function alq_mps_email_form_submit($form, &$form_state) {
  $values = $form_state['values'];

  $footer = alq_mps_get_footer($values['campaign_id']);

  $member_name = 'Member';
  if ($member = node_load($values['emailee_nid'])) {
    $member_name = $member->title;
  }

  $body = alq_mps_replace_tokens($values['body'], [
    'name' => $values['name'],
    'member' => $member_name,
  ]);
  $body .= "\n\n" . ($footer ?: '');

  $address = [];

  if (isset($values['address'])) {
    $address[] = trim($values['address']);
  }

  if (isset($values['suburb'])) {
    $address[] = trim($values['suburb']);
  }

  $insert = [
    'campaign_id' => $values['campaign_id'],
    'recipient' => $values['emailee_nid'],
    'body' => $body,
    'subject' => trim($values['subject']),
    'from_email' => trim($values['email']),
    'from_address' => implode(', ', $address),
    'from_name' => trim($values['name']),
    'spam' => $values['spam'],
    'created' => get_brisbane_time(),
  ];

  user_cookie_save([
    'from_email' => $values['email'],
    'from_name' => $values['name'],
  ]);

  if (drupal_write_record(ALQ_MPS_EMAILS_TABLE, $insert)) {
    drupal_set_message(t('Successfully created email, it will be sent shortly'));
    $_SESSION['alq_mps_email_form_submitted'] = TRUE;
  }
  else {
    drupal_set_message(t('Error sending email, please use our Contact form to let us know what went wrong'), 'error');
  }
}

/**
 * Menu callback for viewing sent emails.
 *
 * @throws \Exception
 */
function alq_mps_admin() {
  /* @var \SelectQueryInterface $query */
  $query = db_select(ALQ_MPS_EMAILS_TABLE, 'emt');
  $num_rows = $query->countQuery()->execute()->fetchField();
  $num_per_page = 40;
  $page = pager_default_initialize($num_rows, $num_per_page);
  $offset = $num_per_page * $page;
  $charsOfEmailToShow = 250;

  $query->fields('emt');
  $query->orderBy('emt.created', 'DESC');
  $query->range($offset, $num_per_page);
  $results = $query->execute();

  // Output them in a paged table.
  $rows = [];

  foreach ($results as $result) {
    $rows[] = [
      $result->id,
      $result->subject,
      $result->from_name,
      $result->from_email,
      $result->spam,
      substr($result->body, 0, $charsOfEmailToShow),
      l($result->campaign_id, '/node/' . urlencode($result->campaign_id)),
      l($result->recipient, '/node/' . urlencode($result->recipient)),
      date('Y-m-d h:m:s', $result->created),
      $result->actioned ? date('Y-m-d h:m:s', $result->actioned) : $result->actioned,
      $result->confirmation_sent,
      $result->status,
    ];
  }

  $links = [
    l(t('View all emailees'), 'admin/workbench/alq-mps/emailees'),
    l(t('Download all emailees'), 'admin/workbench/alq-mps/emailees/csv'),
    l(t('Download emails for current month'), 'admin/workbench/alq-mps/csv/' . date('Y-M'), [
      'attributes' => [
        'target' => '_blank',
        'download' => NULL,
      ],
    ]),
  ];

  $output = '<ul><li>' . implode('</li><li>', $links) . '</li></ul>';

  $output .= theme('table', [
    'header' => [
      'ID',
      'Subject',
      'From',
      'Email',
      'Spam',
      'Body (first ' . $charsOfEmailToShow . ' Chars)',
      'Campaign',
      'Recipient',
      'Created',
      'Actioned',
      'Confirmation sent',
      'Status',
    ],
    'rows' => $rows,
  ]);

  $output .= theme('pager');

  return $output;
}

/**
 * Get time in Brisbane.
 *
 * @return int
 *   Timestamp for Brisbane.
 *
 * @throws \Exception
 */
function get_brisbane_time() {
  try {
    $timezone = 'Australia/Brisbane';
    $datetime = new DateTime('now', new DateTimeZone($timezone));
    return $datetime->getTimestamp();
  }
  catch (\Exception $e) {
    return NULL;
  }
}

/**
 * Menu callback for downloading email statuses.
 *
 * @param string $date
 *   YYYY-MMM.
 *
 * @throws \Exception
 */
function alq_mps_admin_csv($date = NULL) {
  // Should be good for the next thousand years ot so.
  if (!preg_match('/2\d{3}-\w{3}/', $date)) {
    $date = date('Y-M', get_brisbane_time());
  }

  $unixTimeFrom = strtotime($date);

  /* @var \SelectQueryInterface $query */
  $query = db_select(ALQ_MPS_EMAILS_TABLE, 'emt');
  $query->fields('emt');
  $query->condition('emt.created', $unixTimeFrom, '>=');
  // So we get essentially get a second before midnight.
  $unixTimeTo = strtotime(date('Y-m-t 23:59:59', $unixTimeFrom));
  $query->condition('emt.created', $unixTimeTo, '<');
  $query->orderBy('emt.created', 'DESC');
  $results = $query->execute();

  drupal_add_http_header('Content-Type', 'text/csv; utf-8');
  drupal_add_http_header('Content-Disposition', 'attachment;filename=alq-emails-' . $date . '.csv');
  drupal_add_http_header('Expires', '0');
  drupal_add_http_header('Pragma', 'no-cache');

  // Maybe t these.
  $keys = [
    'ID',
    'Subject',
    'From',
    'Email',
    'Spam',
    'Body',
    'Campaign',
    'Recipient',
    'Created',
    'Actioned',
    'Confirmation Sent',
    'Status',
  ];

  $out = fopen('php://output', 'wb');
  fputcsv($out, $keys);

  foreach ($results as $result) {
    $row = [
      $result->id,
      $result->subject,
      $result->from_name,
      $result->from_email,
      $result->spam,
      $result->body,
      l($result->campaign_id, '/node/' . urlencode($result->campaign_id)),
      l($result->recipient, '/node/' . urlencode($result->recipient)),
      date('Y-m-d h:m:s', $result->created),
      $result->actioned ? date('Y-m-d h:m:s', $result->actioned) : $result->actioned,
      $result->confirmation_sent,
      $result->status,
    ];
    fputcsv($out, $row);
  }

  fclose($out);
  drupal_exit();
}

/**
 * Menu callback for downloading emailees .
 *
 * @throws \Exception
 */
function alq_mps_admin_emailees_csv() {
  $emailees = node_load_multiple([], ['type' => 'emailee']);

  $date = date('Y-M-d', get_brisbane_time());

  drupal_add_http_header('Content-Type', 'text/csv; utf-8');
  drupal_add_http_header('Content-Disposition', 'attachment;filename=alq-emailees-' . $date . '.csv');
  drupal_add_http_header('Expires', '0');
  drupal_add_http_header('Pragma', 'no-cache');

  // Maybe t these.
  $keys = [
    'ID',
    'Name',
    'Family name',
    'Given names',
    'Preferred name',
    'Title',
    'Position',
    'Qualifications',
    'Party',
    'Electorate',
    'Electorate type',
    'State',
    'Office 1',
    'Office 2',
    'Comments',
    'URL',
  ];

  $out = fopen('php://output', 'wb');
  fputcsv($out, $keys);

  foreach ($emailees as $emailee) {
    $emailee_wrapper = entity_metadata_wrapper('node', $emailee);
    $offices = [];
    foreach ($emailee_wrapper->field_office as $office) {
      $office = [
        'Address: ' . $office->field_address->value(),
        'Postcode: ' . $office->field_postcode->value(),
        'Email/s: ' . implode(', ', $office->field_email->value()),
        'Phone/s: ' . implode(', ', $office->field_phone->value()),
        'Toll Free Phone: ' . $office->field_toll_free_phone->value(),
        'Fax/s: ' . implode(', ', $office->field_phone->value()),
      ];
      $offices[] = $office;
    }

    $row = [
      $emailee->nid,
      $emailee->title,
      $emailee_wrapper->field_family_name->value(),
      $emailee_wrapper->field_given_names->value(),
      $emailee_wrapper->field_preferred_name->value(),
      $emailee_wrapper->field_title->value(),
      $emailee_wrapper->field_position->value(),
      $emailee_wrapper->field_qualifications->value(),
      $emailee_wrapper->field_party->value(),
      $emailee_wrapper->field_electorate->value(),
      $emailee_wrapper->field_electorate_type->value(),
      $emailee_wrapper->field_state->value()[0],
      isset($offices[0]) ? implode("\n", $offices[0]) : '',
      isset($offices[1]) ? implode("\n", $offices[1]) : '',
      $emailee_wrapper->body->value(),
      'https://alq.org.au/node/' . $emailee->nid . '/edit',
    ];
    fputcsv($out, $row);
  }

  fclose($out);
  drupal_exit();
}

/**
 * Replace tokens.
 *
 * @param string $text
 *   Text to replace tokens with.
 * @param array $tokensAndValues
 *   Hash token => value.
 *
 * @return string
 *   Interpolated string.
 */
function alq_mps_replace_tokens($text, array $tokensAndValues) {
  $returnVal = $text;

  foreach ($tokensAndValues as $token => $value) {
    $returnVal = preg_replace('/\[' . $token . '\]/', $value, $returnVal);
  }

  return $returnVal;
}

/**
 * Parse an mps data and insert into db.
 *
 * @param array $mp
 *   Array representing an MP.
 *
 * @return array
 *   Node object.
 */
function alq_mps_create(array $mp) {
  $values = [
    'type' => 'emailee',
    'uid' => 1,
  ];

  $entity = entity_create('node', $values);

  /* @var \EntityMetadataWrapper $ewrapper */
  $ewrapper = entity_metadata_wrapper('node', $entity);

  $ewrapper->field_electorate_type->set($mp['electorate_type']);
  $ewrapper->field_electorate->set($mp['electorate']);
  $ewrapper->field_party->set($mp['party']);

  // Use nodes title field for name, we also have field_title later.
  $ewrapper->title->set($mp['name']);
  if (isset($mp['given_names'])) {
    $ewrapper->field_given_names->set($mp['given_names']);
  }
  if (isset($mp['family_name'])) {
    $ewrapper->field_family_name->set($mp['family_name']);
  }
  if (isset($mp['preferred_name'])) {
    $ewrapper->field_preferred_name->set($mp['preferred_name']);
  }
  if (isset($mp['position'])) {
    $ewrapper->field_position->set($mp['position']);
  }
  if (isset($mp['qualifications'])) {
    $ewrapper->field_qualifications->set($mp['qualifications']);
  }
  $ewrapper->field_title->set($mp['title']);

  // Save our new MP.
  $ewrapper->save();

  $nid = $ewrapper->getIdentifier();

  $node = node_load($nid);

  foreach ($mp['offices'] as $office) {
    // Setup the values in the structure expected by the
    // field_collection entity.
    if (isset($office['address'])) {
      $values = [
        'field_name' => 'field_office',
        'field_address' => [
          LANGUAGE_NONE => [['value' => $office['address']]],
        ],
        'field_postcode' => isset($office['postcode']) ? [
          LANGUAGE_NONE => [['value' => $office['postcode']]],
        ] : NULL,
        'field_email' => isset($office['email']) ? [
          LANGUAGE_NONE => [['email' => $office['email']]],
        ] : NULL,
        'field_phone' => [
          LANGUAGE_NONE => [['value' => $office['phone']]],
        ],
        'field_toll_free_phone' => isset($office['toll_free_phone']) ? [
          LANGUAGE_NONE => [['value' => $office['toll_free_phone']]],
        ] : NULL,
        'field_fax' => isset($office['fax']) ? [
          LANGUAGE_NONE => [['value' => $office['fax']]],
        ] : NULL,
      ];

      $officeEntity = entity_create('field_collection_item', $values);

      $officeEntity->setHostEntity('node', $node);

      $officeEntity->save();
    }
  }

  return $node;
}
